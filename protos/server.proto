// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// https://github1s.com/googleapis/googleapis/blob/master/google/cloud/compute/v1/compute.proto

syntax = "proto3";

package core.wcloud.io.v1;

import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/api/field_behavior.proto";
import "google/api/resource.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";

option go_package = "core.wcloud.io/generated/grpcgen;server";

// This API represents a simple digital server. It lets you manage Server
// resources and Disk resources in the server. It defines the following
// resource model:
//
// - The API has a collection of [Server][core.wcloud.io.server.v1.Server]
//   resources, named `servers/*`
//
// - Each Server has a collection of [Disk][core.wcloud.io.server.v1.Disk]
//   resources, named `servers/*/disks/*`
service ServerService {
  option (google.api.default_host) = "core.wcloud.io";

  // Creates a server, and returns the new Server.
  rpc CreateServer(CreateServerRequest) returns (Server) {
    option (google.api.http) = {
      post: "/v1/servers"
      body: "server"
    };
    option (google.api.method_signature) = "server";
  }

  // Gets a server. Returns NOT_FOUND if the server does not exist.
  rpc GetServer(GetServerRequest) returns (Server) {
    option (google.api.http) = {
      get: "/v1/{name=servers/*}"
    };
    option (google.api.method_signature) = "name";
  }

  // Lists servers. The order is unspecified but deterministic. Newly created
  // servers will not necessarily be added to the end of this list.
  rpc ListServers(ListServersRequest) returns (ListServersResponse) {
    option (google.api.http) = {
      get: "/v1/servers"
    };
  }

  rpc UpdateServer(UpdateServerRequest) returns (Server) {
    option (google.api.http) = {
      post: "/v1/servers/*"
      body: "server"
    };
    option (google.api.method_signature) = "server";
  }

  // Deletes a server. Returns NOT_FOUND if the server does not exist.
  rpc DeleteServer(DeleteServerRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/{name=servers/*}"
    };
    option (google.api.method_signature) = "name";
  }

  // Merges two servers by adding all disks from the server named
  // `other_server_name` to server `name`, and deletes
  // `other_server_name`. Returns the updated server.
  // The book ids of the moved disks may not be the same as the original disks.
  //
  // Returns NOT_FOUND if either server does not exist.
  // This call is a no-op if the specified servers are the same.
  rpc MergeServers(MergeserversRequest) returns (Server) {
    option (google.api.http) = {
      post: "/v1/{name=servers/*}:merge"
      body: "*"
    };
    option (google.api.method_signature) = "name,other_server";
  }

  // Creates a book, and returns the new Disk.
  rpc CreateDisk(CreateDiskRequest) returns (Disk) {
    option (google.api.http) = {
      post: "/v1/{parent=servers/*}/disks"
      body: "book"
    };
    option (google.api.method_signature) = "parent,book";
  }

  // Gets a book. Returns NOT_FOUND if the book does not exist.
  rpc GetDisk(GetDiskRequest) returns (Disk) {
    option (google.api.http) = {
      get: "/v1/{name=servers/*/disks/*}"
    };
    option (google.api.method_signature) = "name";
  }

  // Lists disks in a server. The order is unspecified but deterministic. Newly
  // created disks will not necessarily be added to the end of this list.
  // Returns NOT_FOUND if the server does not exist.
  rpc ListDisks(ListDisksRequest) returns (ListDisksResponse) {
    option (google.api.http) = {
      get: "/v1/{parent=servers/*}/disks"
    };
    option (google.api.method_signature) = "parent";
  }

  // Deletes a book. Returns NOT_FOUND if the book does not exist.
  rpc DeleteDisk(DeleteDiskRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/{name=servers/*/disks/*}"
    };
    option (google.api.method_signature) = "name";
  }

  // Updates a book. Returns INVALID_ARGUMENT if the name of the book
  // is non-empty and does not equal the existing name.
  rpc UpdateDisk(UpdateDiskRequest) returns (Disk) {
    option (google.api.http) = {
      patch: "/v1/{book.name=servers/*/disks/*}"
      body: "book"
    };
    option (google.api.method_signature) = "book,update_mask";
  }

  // Moves a book to another server, and returns the new book. The book
  // id of the new book may not be the same as the original book.
  rpc MoveDisk(MoveDiskRequest) returns (Disk) {
    option (google.api.http) = {
      post: "/v1/{name=servers/*/disks/*}:move"
      body: "*"
    };
    option (google.api.method_signature) = "name,other_server_name";
  }
}

// A single book in the server.
message Disk {
  option (google.api.resource) = {
    type: "core.wcloud.io/Disk",
    pattern: "servers/{server}/disks/{book}"
  };

  // The resource name of the book.
  // Disk names have the form `servers/{server_id}/disks/{book_id}`.
  // The name is ignored when creating a book.
  string name = 1;

  // The name of the book author.
  string author = 2;

  // The title of the book.
  string title = 3;

  // Value indicating whether the book has been read.
  bool read = 4;
}

// A Server contains a collection of disks with a theme.
message Server {
  option (google.api.resource) = {
    type: "core.wcloud.io/Server",
    pattern: "servers/{server_id}"
  };

  // The resource name of the server.
  // Server names have the form `servers/{server_id}`.
  // The name is ignored when creating a server.
  string name = 1;

  // The theme of the server
  string theme = 2;
}

// Request message for ServerService.CreateServer.
message CreateServerRequest {
  // The server to create.
  Server server = 1 [(google.api.field_behavior) = REQUIRED];
}

// Request message for ServerService.UpdateServer.
message UpdateServerRequest {
  // The server to update.
  Server server = 1 [(google.api.field_behavior) = REQUIRED];
}

// Request message for ServerService.GetServer.
message GetServerRequest {
  // The name of the server to retrieve.
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference).type =
        "core.wcloud.io/Server"
  ];
}

// Request message for ServerService.ListServers.
message ListServersRequest {
  // Requested page size. Server may return fewer servers than requested.
  // If unspecified, server will pick an appropriate default.
  int32 page_size = 1;

  // A token identifying a page of results the server should return.
  // Typically, this is the value of
  // [ListserversResponse.next_page_token][core.wcloud.io.server.v1.ListserversResponse.next_page_token]
  // returned from the previous call to `Listservers` method.
  string page_token = 2;
}

// Response message for ServerService.Listservers.
message ListServersResponse {
  // The list of servers.
  repeated Server servers = 1;

  // A token to retrieve next page of results.
  // Pass this value in the
  // [ListserversRequest.page_token][core.wcloud.io.server.v1.ListserversRequest.page_token]
  // field in the subsequent call to `Listservers` method to retrieve the next
  // page of results.
  string next_page_token = 2;
}

// Request message for ServerService.DeleteServer.
message DeleteServerRequest {
  // The name of the server to delete.
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference).type =
        "core.wcloud.io/Server"
  ];
}

// Describes the server being removed (other_server_name) and updated
// (name) in this merge.
message MergeserversRequest {
  // The name of the server we're adding disks to.
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference).type =
        "core.wcloud.io/Server"
  ];

  // The name of the server we're removing disks from and deleting.
  string other_server = 2 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference).type =
        "core.wcloud.io/Server"
  ];
}

// Request message for ServerService.CreateDisk.
message CreateDiskRequest {
  // The name of the server in which the book is created.
  string parent = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference).type =
        "core.wcloud.io/Server"
  ];

  // The book to create.
  Disk book = 2 [(google.api.field_behavior) = REQUIRED];
}

// Request message for ServerService.GetDisk.
message GetDiskRequest {
  // The name of the book to retrieve.
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference).type = "core.wcloud.io/Disk"
  ];
}

// Request message for ServerService.ListDisks.
message ListDisksRequest {
  // The name of the server whose disks we'd like to list.
  string parent = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference).type =
        "core.wcloud.io/Server"
  ];

  // Requested page size. Server may return fewer disks than requested.
  // If unspecified, server will pick an appropriate default.
  int32 page_size = 2;

  // A token identifying a page of results the server should return.
  // Typically, this is the value of
  // [ListDisksResponse.next_page_token][core.wcloud.io.server.v1.ListDisksResponse.next_page_token].
  // returned from the previous call to `ListDisks` method.
  string page_token = 3;
}

// Response message for ServerService.ListDisks.
message ListDisksResponse {
  // The list of disks.
  repeated Disk disks = 1;

  // A token to retrieve next page of results.
  // Pass this value in the
  // [ListDisksRequest.page_token][core.wcloud.io.server.v1.ListDisksRequest.page_token]
  // field in the subsequent call to `ListDisks` method to retrieve the next
  // page of results.
  string next_page_token = 2;
}

// Request message for ServerService.UpdateDisk.
message UpdateDiskRequest {
  // The name of the book to update.
  Disk book = 1 [(google.api.field_behavior) = REQUIRED];

  // Required. Mask of fields to update.
  google.protobuf.FieldMask update_mask = 2
      [(google.api.field_behavior) = REQUIRED];
}

// Request message for ServerService.DeleteDisk.
message DeleteDiskRequest {
  // The name of the book to delete.
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference).type = "core.wcloud.io/Disk"
  ];
}

// Describes what book to move (name) and what server we're moving it
// to (other_server_name).
message MoveDiskRequest {
  // The name of the book to move.
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference).type = "core.wcloud.io/Disk"
  ];

  // The name of the destination server.
  string other_server_name = 2 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference).type =
        "core.wcloud.io/Server"
  ];
}
